openapi: 3.0.1
info:
  title: Matterhorn API
  description: Draft spec for the Matterhorn POC
  contact:
    email: ozinoveva@gmail.com
  license:
    name: Unlicensed
  version: 0.1.0
tags:
- name: counters
  description: Operations for managing Counter data
- name: exercise
  description: Operations for managing Exercise data
- name: food
  description: Operations for managing Food data
- name: goals
  description: Operations for managing Goals data
- name: metrics
  description: Operations for managing Metrics data
paths:
  /counter:
    get:
      tags:
      - counters
      summary: Get the current counter value and increment it
      operationId: getCounter
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'
  /user/{userId}/exercise:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID associated with these exercise records
        schema:
          type: integer
          format: int64
    post:
      tags:
      - exercise
      summary: Add a new exercise record
      operationId: postExerciseRecord
      requestBody:
        required: true
        description: Exercise record to add to the log
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseRecord'
      responses:
        204:
          description: Successful exercise add operation
        404:
          description: User not found
    get:
      tags:
      - exercise
      summary: Get exercise records for a user and a given time range
      operationId: getExerciseRecords
      parameters:        
        - name: startDateTime
          in: query
          required: true
          description: Start of the date-time range associated with requested exercise records
          schema:
            type: string
            format: date-time
        - name: endDateTime
          in: query
          required: true
          description: End of the date-time range associated with requested exercise records
          schema:
            type: string
            format: date-time 
      responses:
        200:
          description: Successful exercise record retrieval operation
          content:
            application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ExerciseRecord'
        404:
          description: User not found
        400:
          description: Time range invalid
  /user/{userId}/food:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID associated with these food records
        schema:
          type: integer
          format: int64
    post:
      tags:
      - food
      summary: Add a new food record
      operationId: postFoodRecord
      requestBody:
        required: true
        description: Food record to add to the log
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodRecord'
      responses:
        204:
          description: Successful food add operation
        404:
          description: User not found
    get:
      tags:
      - food
      summary: Get food records for a user and a given time range
      operationId: getFoodRecords
      parameters:        
        - name: startDateTime
          in: query
          required: true
          description: Start of the date-time range associated with requested food records
          schema:
            type: string
            format: date-time
        - name: endDateTime
          in: query
          required: true
          description: End of the date-time range associated with requested food records
          schema:
            type: string
            format: date-time 
      responses:
        200:
          description: Successful food record retrieval operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodRecord'
        404:
          description: User not found
        400:
          description: Time range invalid
  /user/{userId}/calorieGoal:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID associated with this calorie goal
        schema:
          type: integer
          format: int64
    put:
      tags:
        - goals
      summary: Update the calorie goal for the user
      operationId: putCalorieGoal
      requestBody:
        required: true
        description: Updated calorie goal
        content:
          application/json:
            schema:
              type: integer
              format: int64
      responses:        
        204:
          description: Successful calorie goal update operation
        404:
          description: User not found
        400:
          description: Invalid calorie goal provided
    get:
      tags:
        - goals
      summary: Get the calorie goal for the user
      operationId: getCalorieGoal
      responses:
        200:
          description: Successful calorie goal retrieval operation
          content: 
            application/json:
              schema:
                type: integer
                format: int32
        404:
          description: User not found
  /user/{userId}/metrics:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID associated with this calorie goal
        schema:
          type: integer
          format: int64
    put:
      tags:
        - metrics
      summary: Update body metrics for the user
      operationId: putMetrics
      requestBody:
        required: true
        description: Updated metrics
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyMetrics'
      responses:        
        204:
          description: Successful body metrics update operation
        404:
          description: User not found
        400:
          description: Invalid body metrics format
    get:
      tags:
        - metrics
      summary: Get the body metrics for the user
      operationId: getMetrics
      responses:
        200:
          description: Successful body metrics retrieval operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/BodyMetrics'
        404:
          description: User not found
  
components:
  schemas:
    BodyMetrics:
      type: object
      required:
        - height
        - weight
        - sex
        - age
      properties:
        height:
          type: integer
          format: int64
          description: Height in inches
        weight:
          type: number
          format: float
          description: Weight in pounds
        sex:
          type: string
        age:
          type: integer
          format: int32
          description: Age in years
    FoodRecord:
      type: object
      required:
        - calories
        - timestamp
      properties:
        calories:
          type: integer
          format: int32
          description: Calories in this food record
        label:
          type: string
          description: Optional name or label for this food
        timestamp:
          type: string
          format: date-time
    ExerciseRecord:
      type: object
      required:
        - calories
        - timestamp
      properties:
        calories:
          type: integer
          format: int32
          description: Calories in this exercise record
        label:
          type: string
          description: Optional name or label for this exercise
        timestamp:
          type: string
          format: date-time
     
    Counter:
      required:
      - ID
      - Value
      type: object
      properties:
        ID:
          type: integer
          format: int64
          description: Unique identifier for the returned counter
        Value:
          type: integer
          format: int64
          description: Current value of the counter
      xml:
        name: Counter

  securitySchemes:
    matterhorn_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: TODO_POPULATE_THIS
          scopes:
            api: Access Matterhorn API
    api_key:
      type: apiKey
      name: api_key
      in: header
