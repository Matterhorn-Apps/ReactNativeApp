/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface BodyMetrics {
  /**
   * Height in inches
   */
  height: number;
  /**
   * Weight in pounds
   */
  weight: number;
  sex: string;
  /**
   * Age in years
   */
  age: number;
}

export interface CalorieGoal {
  /**
   * Target number of daily calories
   */
  calories: number;
}

export interface FoodRecord {
  /**
   * Calories in this food record
   */
  calories: number;
  /**
   * Optional name or label for this food
   */
  label?: string;
  timestamp: string;
}

export interface ExerciseRecord {
  /**
   * Calories in this exercise record
   */
  calories: number;
  /**
   * Optional name or label for this exercise
   */
  label?: string;
  timestamp: string;
}

export interface Counter {
  /**
   * Unique identifier for the returned counter
   */
  ID: number;
  /**
   * Current value of the counter
   */
  Value: number;
}

export type GetCounterProps = Omit<GetProps<Counter, unknown, void>, "path">;

/**
 * Get the current counter value and increment it
 */
export const GetCounter = (props: GetCounterProps) => (
  <Get<Counter, unknown, void>
    path={`/counter`}
    {...props}
  />
);

export type UseGetCounterProps = Omit<UseGetProps<Counter, void>, "path">;

/**
 * Get the current counter value and increment it
 */
export const useGetCounter = (props: UseGetCounterProps) => useGet<Counter, unknown, void>(`/counter`, props);


export interface GetExerciseRecordsQueryParams {
  /**
   * Start of the date-time range associated with requested exercise
   * records
   */
  startDateTime: string;
  /**
   * End of the date-time range associated with requested exercise
   * records
   */
  endDateTime: string;
}

export type GetExerciseRecordsProps = Omit<GetProps<ExerciseRecord[], void, GetExerciseRecordsQueryParams>, "path"> & {userId: number};

/**
 * Get exercise records for a user and a given time range
 */
export const GetExerciseRecords = ({userId, ...props}: GetExerciseRecordsProps) => (
  <Get<ExerciseRecord[], void, GetExerciseRecordsQueryParams>
    path={`/user/${userId}/exercise`}
    {...props}
  />
);

export type UseGetExerciseRecordsProps = Omit<UseGetProps<ExerciseRecord[], GetExerciseRecordsQueryParams>, "path"> & {userId: number};

/**
 * Get exercise records for a user and a given time range
 */
export const useGetExerciseRecords = ({userId, ...props}: UseGetExerciseRecordsProps) => useGet<ExerciseRecord[], void, GetExerciseRecordsQueryParams>(`/user/${userId}/exercise`, props);


export type PostExerciseRecordProps = Omit<MutateProps<void, void, void, ExerciseRecord>, "path" | "verb"> & {userId: number};

/**
 * Add a new exercise record
 */
export const PostExerciseRecord = ({userId, ...props}: PostExerciseRecordProps) => (
  <Mutate<void, void, void, ExerciseRecord>
    verb="POST"
    path={`/user/${userId}/exercise`}
    {...props}
  />
);

export type UsePostExerciseRecordProps = Omit<UseMutateProps<void, void, ExerciseRecord>, "path" | "verb"> & {userId: number};

/**
 * Add a new exercise record
 */
export const usePostExerciseRecord = ({userId, ...props}: UsePostExerciseRecordProps) => useMutate<void, void, void, ExerciseRecord>("POST", `/user/${userId}/exercise`, props);


export interface GetFoodRecordsQueryParams {
  /**
   * Start of the date-time range associated with requested food records
   */
  startDateTime: string;
  /**
   * End of the date-time range associated with requested food records
   */
  endDateTime: string;
}

export type GetFoodRecordsProps = Omit<GetProps<FoodRecord[], void, GetFoodRecordsQueryParams>, "path"> & {userId: number};

/**
 * Get food records for a user and a given time range
 */
export const GetFoodRecords = ({userId, ...props}: GetFoodRecordsProps) => (
  <Get<FoodRecord[], void, GetFoodRecordsQueryParams>
    path={`/user/${userId}/food`}
    {...props}
  />
);

export type UseGetFoodRecordsProps = Omit<UseGetProps<FoodRecord[], GetFoodRecordsQueryParams>, "path"> & {userId: number};

/**
 * Get food records for a user and a given time range
 */
export const useGetFoodRecords = ({userId, ...props}: UseGetFoodRecordsProps) => useGet<FoodRecord[], void, GetFoodRecordsQueryParams>(`/user/${userId}/food`, props);


export type PostFoodRecordProps = Omit<MutateProps<void, void, void, FoodRecord>, "path" | "verb"> & {userId: number};

/**
 * Add a new food record
 */
export const PostFoodRecord = ({userId, ...props}: PostFoodRecordProps) => (
  <Mutate<void, void, void, FoodRecord>
    verb="POST"
    path={`/user/${userId}/food`}
    {...props}
  />
);

export type UsePostFoodRecordProps = Omit<UseMutateProps<void, void, FoodRecord>, "path" | "verb"> & {userId: number};

/**
 * Add a new food record
 */
export const usePostFoodRecord = ({userId, ...props}: UsePostFoodRecordProps) => useMutate<void, void, void, FoodRecord>("POST", `/user/${userId}/food`, props);


export type GetCalorieGoalProps = Omit<GetProps<CalorieGoal, void, void>, "path"> & {userId: number};

/**
 * Get the calorie goal for the user
 */
export const GetCalorieGoal = ({userId, ...props}: GetCalorieGoalProps) => (
  <Get<CalorieGoal, void, void>
    path={`/user/${userId}/calorieGoal`}
    {...props}
  />
);

export type UseGetCalorieGoalProps = Omit<UseGetProps<CalorieGoal, void>, "path"> & {userId: number};

/**
 * Get the calorie goal for the user
 */
export const useGetCalorieGoal = ({userId, ...props}: UseGetCalorieGoalProps) => useGet<CalorieGoal, void, void>(`/user/${userId}/calorieGoal`, props);


export type PutCalorieGoalProps = Omit<MutateProps<void, void, void, CalorieGoal>, "path" | "verb"> & {userId: number};

/**
 * Update the calorie goal for the user
 */
export const PutCalorieGoal = ({userId, ...props}: PutCalorieGoalProps) => (
  <Mutate<void, void, void, CalorieGoal>
    verb="PUT"
    path={`/user/${userId}/calorieGoal`}
    {...props}
  />
);

export type UsePutCalorieGoalProps = Omit<UseMutateProps<void, void, CalorieGoal>, "path" | "verb"> & {userId: number};

/**
 * Update the calorie goal for the user
 */
export const usePutCalorieGoal = ({userId, ...props}: UsePutCalorieGoalProps) => useMutate<void, void, void, CalorieGoal>("PUT", `/user/${userId}/calorieGoal`, props);


export type GetMetricsProps = Omit<GetProps<BodyMetrics, void, void>, "path"> & {userId: number};

/**
 * Get the body metrics for the user
 */
export const GetMetrics = ({userId, ...props}: GetMetricsProps) => (
  <Get<BodyMetrics, void, void>
    path={`/user/${userId}/metrics`}
    {...props}
  />
);

export type UseGetMetricsProps = Omit<UseGetProps<BodyMetrics, void>, "path"> & {userId: number};

/**
 * Get the body metrics for the user
 */
export const useGetMetrics = ({userId, ...props}: UseGetMetricsProps) => useGet<BodyMetrics, void, void>(`/user/${userId}/metrics`, props);


export type PutMetricsProps = Omit<MutateProps<void, void, void, BodyMetrics>, "path" | "verb"> & {userId: number};

/**
 * Update body metrics for the user
 */
export const PutMetrics = ({userId, ...props}: PutMetricsProps) => (
  <Mutate<void, void, void, BodyMetrics>
    verb="PUT"
    path={`/user/${userId}/metrics`}
    {...props}
  />
);

export type UsePutMetricsProps = Omit<UseMutateProps<void, void, BodyMetrics>, "path" | "verb"> & {userId: number};

/**
 * Update body metrics for the user
 */
export const usePutMetrics = ({userId, ...props}: UsePutMetricsProps) => useMutate<void, void, void, BodyMetrics>("PUT", `/user/${userId}/metrics`, props);

